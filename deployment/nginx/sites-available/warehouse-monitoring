# Upstream for PHP-FPM
upstream php-fpm {
    server unix:/run/php/php8.3-fpm.sock;
    keepalive 32;
}

server {
    listen 80;
    listen [::]:80;
    server_name outletsolo-cuy.com localhost _;

    # Security headers
    include /etc/nginx/conf.d/security-headers.conf;

    # Root directory points to React build output
    root /var/www/warehouse-monitoring/dist/;
    index index.html;

    # Maximum file upload size
    client_max_body_size 64M;
    client_body_timeout 60s;
    client_header_timeout 60s;

    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/x-font-ttf
        application/vnd.ms-fontobject
        font/opentype;

    # Brotli compression (if available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Frontend routes (SPA) - React Router
    location / {
        try_files $uri $uri/ /index.html;

        # Cache static files
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
            try_files $uri =404;
        }
    }

    # API endpoints with rate limiting
    location ~ ^/api/(auth\.php)$ {
        limit_req zone=login burst=3 nodelay;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME /var/www/warehouse-monitoring/backend/api/$1;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_index index.php;
        fastcgi_pass php-fpm;
        fastcgi_read_timeout 300;
        fastcgi_send_timeout 300;

        # CORS headers for API
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials true always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With";
            add_header Access-Control-Allow-Credentials true;
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain charset=UTF-8';
            add_header Content-Length 0;
            return 204;
        }
    }

    # Other API endpoints
    location ~ ^/api/(.+\.php)$ {
        limit_req zone=api burst=20 nodelay;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME /var/www/warehouse-monitoring/backend/api/$1;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_index index.php;
        fastcgi_pass php-fpm;
        fastcgi_read_timeout 300;
        fastcgi_send_timeout 300;

        # CORS headers for API
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials true always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With";
            add_header Access-Control-Allow-Credentials true;
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain charset=UTF-8';
            add_header Content-Length 0;
            return 204;
        }
    }

    # PHPMyAdmin location
    location /phpmyadmin {
        alias /usr/share/phpmyadmin;
        index index.php;

        # Restrict access by IP (uncomment and modify for production)
        # allow 192.168.1.0/24;
        # allow 10.0.0.0/8;
        # deny all;

        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_pass php-fpm;
            fastcgi_param SCRIPT_FILENAME $request_filename;
            fastcgi_read_timeout 300;
        }

        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1h;
            add_header Cache-Control "public";
        }
    }

    # Block access to sensitive files and directories
    location ~ /\. {
        deny all;
        return 403;
    }

    location ~ /(config|backend/config|database|deployment)/ {
        deny all;
        return 403;
    }

    location ~ \.(sql|env|log|ini)$ {
        deny all;
        return 403;
    }

    # Block common attack patterns
    location ~* (eval\(|base64_decode|gzinflate|rot13|str_rot13) {
        deny all;
        return 403;
    }

    # Block access to backup files
    location ~* \.(bak|backup|old|orig|original|tmp)$ {
        deny all;
        return 403;
    }

    # Monitoring endpoint for health checks
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Logs
    access_log /var/log/nginx/warehouse-monitoring.access.log combined;
    error_log /var/log/nginx/warehouse-monitoring.error.log warn;
}

# SSL/TLS configuration (for production with certificate)
#server {
#    listen 443 ssl http2;
#    listen [::]:443 ssl http2;
#    server_name warehouse-monitoring.local;

    # SSL certificate paths (update with your certificate paths)
    # ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;

    # SSL configuration
#    ssl_protocols TLSv1.2 TLSv1.3;
#    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
#    ssl_prefer_server_ciphers off;
#    ssl_session_cache shared:SSL:10m;
#    ssl_session_timeout 10m;
#    ssl_stapling on;
#    ssl_stapling_verify on;

    # Security headers for HTTPS
#    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Include the same configuration as HTTP server above
    # (Copy all location blocks from the HTTP server)
#}

# Redirect HTTP to HTTPS (uncomment for production with SSL)
# server {
#     listen 80;
#     listen [::]:80;
#     server_name warehouse-monitoring.local;
#     return 301 https://$server_name$request_uri;
# }